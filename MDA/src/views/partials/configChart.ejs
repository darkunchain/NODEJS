<script>

Chart.pluginService.register({
  beforeRender: function (chart) {
    if (chart.config.options.showAllTooltips) {
        // create an array of tooltips
        // we can't use the chart tooltip because there is only one tooltip per chart
        chart.pluginTooltips = [];
        chart.config.data.datasets.forEach(function (dataset, i) {
            chart.getDatasetMeta(i).data.forEach(function (sector, j) {
                chart.pluginTooltips.push(new Chart.Tooltip({
                    _chart: chart.chart,
                    _chartInstance: chart,
                    _data: chart.data,
                    _options: chart.options.tooltips,
                    _active: [sector]
                }, chart));
            });
        });

        // turn off normal tooltips
        chart.options.tooltips.enabled = false;
    }
},
  afterDraw: function (chart, easing) {
    if (chart.config.options.showAllTooltips) {
        // we don't want the permanent tooltips to animate, so don't do anything till the animation runs atleast once
        if (!chart.allTooltipsOnce) {
            if (easing !== 1)
                return;
            chart.allTooltipsOnce = true;
        }

        // turn on tooltips
        chart.options.tooltips.enabled = true;
        Chart.helpers.each(chart.pluginTooltips, function (tooltip) {
            tooltip.initialize();
            tooltip.update();
            // we don't actually need this since we are not animating tooltips
            tooltip.pivot();
            tooltip.transition(easing).draw();
        });
        chart.options.tooltips.enabled = false;
    }
  }
});






////////////////////////////   Variable options para graficas tipo PIE /////////////////////////////////

var optionsPie = {
          title: {
            text: "Total de Tickets Enero",
            display: true,
            position: 'top',
            fontSize: 18,
            fontColor: "#111"         
          },          
          tooltips: {
              enabled: true,
              mode: 'label', //point, nearest, index, dataset, x, y
              intersect: false,
              position: 'average',
              callbacks: {
                label: function(tooltipItem, data) {
                  //get the concerned dataset
                  var nombres = data.labels
                  var dataset = data.datasets[tooltipItem.datasetIndex];
                  //calculate the total of this data set
                  var total = dataset.data.reduce(function(previousValue, currentValue, currentIndex, array) {
                    return previousValue + currentValue;
                  });
                  //get the current items value
                  var currentValue = dataset.data[tooltipItem.index];
                  //calculate the precentage based on the total and current item, also this does a rough rounding to give a whole number
                  var percentage = Math.floor(((currentValue/total) * 100)+0.5);
                  nombre = nombres[tooltipItem.index]
                  console.log(nombre)
                  return nombre + ": "  + currentValue + " - " + percentage + "%";
                  
                }
              }              
          },
          showAllTooltips: true,          
          plugins: {
              datalabels: {
                  formatter: (value, ctx) => {
                      let sum = 0;
                      let dataArr = ctx.chart.data.datasets[0].data;
                      dataArr.map(data => {
                          sum += data;
                      });
                      let percentage = (value*100 / sum).toFixed(2)+"%";                      
                      return percentage;
                  },
                  color: '#fff'
              }
          },
          legend: {
            display: true,
            position: 'bottom',
              labels: {
                fontColor: "#333",
                fontSize: 16
              }
          },
          animation: {
            animateRotate: true,
            animateScale: true
          },
          rotation: -0.7 * Math.PI,
          responsive: true,
          maintainAspectRatio: true
        }

</script>